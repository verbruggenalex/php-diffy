<?php
/**
 * CompareCustomEnvironment
 *
 * PHP version 5
 *
 * @category Class
 * @package  VerbruggenAlex\PhpDiffy
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Diffy
 *
 * API for visual regression testing tool Diffy
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VerbruggenAlex\PhpDiffy\Model;

use \ArrayAccess;
use \VerbruggenAlex\PhpDiffy\ObjectSerializer;

/**
 * CompareCustomEnvironment Class Doc Comment
 *
 * @category Class
 * @package  VerbruggenAlex\PhpDiffy
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompareCustomEnvironment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CompareCustomEnvironment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'environments' => 'string',
'url1' => 'string',
'url2' => 'string',
'login1' => '\VerbruggenAlex\PhpDiffy\Model\CompareCustomEnvironmentLogin1',
'login2' => '\VerbruggenAlex\PhpDiffy\Model\CompareCustomEnvironmentLogin1'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'environments' => null,
'url1' => 'url',
'url2' => 'url',
'login1' => null,
'login2' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'environments' => 'environments',
'url1' => 'url1',
'url2' => 'url2',
'login1' => 'login1',
'login2' => 'login2'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'environments' => 'setEnvironments',
'url1' => 'setUrl1',
'url2' => 'setUrl2',
'login1' => 'setLogin1',
'login2' => 'setLogin2'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'environments' => 'getEnvironments',
'url1' => 'getUrl1',
'url2' => 'getUrl2',
'login1' => 'getLogin1',
'login2' => 'getLogin2'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ENVIRONMENTS_CUSTOM = 'custom';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnvironmentsAllowableValues()
    {
        return [
            self::ENVIRONMENTS_CUSTOM,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['environments'] = isset($data['environments']) ? $data['environments'] : null;
        $this->container['url1'] = isset($data['url1']) ? $data['url1'] : null;
        $this->container['url2'] = isset($data['url2']) ? $data['url2'] : null;
        $this->container['login1'] = isset($data['login1']) ? $data['login1'] : null;
        $this->container['login2'] = isset($data['login2']) ? $data['login2'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEnvironmentsAllowableValues();
        if (!is_null($this->container['environments']) && !in_array($this->container['environments'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'environments', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets environments
     *
     * @return string
     */
    public function getEnvironments()
    {
        return $this->container['environments'];
    }

    /**
     * Sets environments
     *
     * @param string $environments environments
     *
     * @return $this
     */
    public function setEnvironments($environments)
    {
        $allowedValues = $this->getEnvironmentsAllowableValues();
        if (!is_null($environments) && !in_array($environments, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'environments', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['environments'] = $environments;

        return $this;
    }

    /**
     * Gets url1
     *
     * @return string
     */
    public function getUrl1()
    {
        return $this->container['url1'];
    }

    /**
     * Sets url1
     *
     * @param string $url1 URL for first page
     *
     * @return $this
     */
    public function setUrl1($url1)
    {
        $this->container['url1'] = $url1;

        return $this;
    }

    /**
     * Gets url2
     *
     * @return string
     */
    public function getUrl2()
    {
        return $this->container['url2'];
    }

    /**
     * Sets url2
     *
     * @param string $url2 URL for second page
     *
     * @return $this
     */
    public function setUrl2($url2)
    {
        $this->container['url2'] = $url2;

        return $this;
    }

    /**
     * Gets login1
     *
     * @return \VerbruggenAlex\PhpDiffy\Model\CompareCustomEnvironmentLogin1
     */
    public function getLogin1()
    {
        return $this->container['login1'];
    }

    /**
     * Sets login1
     *
     * @param \VerbruggenAlex\PhpDiffy\Model\CompareCustomEnvironmentLogin1 $login1 login1
     *
     * @return $this
     */
    public function setLogin1($login1)
    {
        $this->container['login1'] = $login1;

        return $this;
    }

    /**
     * Gets login2
     *
     * @return \VerbruggenAlex\PhpDiffy\Model\CompareCustomEnvironmentLogin1
     */
    public function getLogin2()
    {
        return $this->container['login2'];
    }

    /**
     * Sets login2
     *
     * @param \VerbruggenAlex\PhpDiffy\Model\CompareCustomEnvironmentLogin1 $login2 login2
     *
     * @return $this
     */
    public function setLogin2($login2)
    {
        $this->container['login2'] = $login2;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
