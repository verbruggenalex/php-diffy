<?php
/**
 * FullProjectAuthenticate
 *
 * PHP version 5
 *
 * @category Class
 * @package  VerbruggenAlex\PhpDiffy
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Diffy
 *
 * API for visual regression testing tool Diffy
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VerbruggenAlex\PhpDiffy\Model;

use \ArrayAccess;
use \VerbruggenAlex\PhpDiffy\ObjectSerializer;

/**
 * FullProjectAuthenticate Class Doc Comment
 *
 * @category Class
 * @package  VerbruggenAlex\PhpDiffy
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FullProjectAuthenticate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FullProject_authenticate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enabled' => 'bool',
'type' => 'string',
'click_element' => 'bool',
'click_element_selector' => 'string',
'login_url' => 'string',
'username' => 'string',
'username_selector' => 'string',
'password' => 'string',
'password_selector' => 'string',
'submit_selector' => 'string',
'afterlogin_selector' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enabled' => null,
'type' => null,
'click_element' => null,
'click_element_selector' => null,
'login_url' => null,
'username' => null,
'username_selector' => null,
'password' => null,
'password_selector' => null,
'submit_selector' => null,
'afterlogin_selector' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
'type' => 'type',
'click_element' => 'clickElement',
'click_element_selector' => 'clickElementSelector',
'login_url' => 'loginURL',
'username' => 'username',
'username_selector' => 'usernameSelector',
'password' => 'password',
'password_selector' => 'passwordSelector',
'submit_selector' => 'submitSelector',
'afterlogin_selector' => 'afterloginSelector'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
'type' => 'setType',
'click_element' => 'setClickElement',
'click_element_selector' => 'setClickElementSelector',
'login_url' => 'setLoginUrl',
'username' => 'setUsername',
'username_selector' => 'setUsernameSelector',
'password' => 'setPassword',
'password_selector' => 'setPasswordSelector',
'submit_selector' => 'setSubmitSelector',
'afterlogin_selector' => 'setAfterloginSelector'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
'type' => 'getType',
'click_element' => 'getClickElement',
'click_element_selector' => 'getClickElementSelector',
'login_url' => 'getLoginUrl',
'username' => 'getUsername',
'username_selector' => 'getUsernameSelector',
'password' => 'getPassword',
'password_selector' => 'getPasswordSelector',
'submit_selector' => 'getSubmitSelector',
'afterlogin_selector' => 'getAfterloginSelector'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_DRUPAL = 'drupal';
const TYPE_WORDPRESS = 'wordpress';
const TYPE_CUSTOM = 'custom';
const TYPE_AUTH0 = 'auth0';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DRUPAL,
self::TYPE_WORDPRESS,
self::TYPE_CUSTOM,
self::TYPE_AUTH0,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['click_element'] = isset($data['click_element']) ? $data['click_element'] : null;
        $this->container['click_element_selector'] = isset($data['click_element_selector']) ? $data['click_element_selector'] : null;
        $this->container['login_url'] = isset($data['login_url']) ? $data['login_url'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['username_selector'] = isset($data['username_selector']) ? $data['username_selector'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['password_selector'] = isset($data['password_selector']) ? $data['password_selector'] : null;
        $this->container['submit_selector'] = isset($data['submit_selector']) ? $data['submit_selector'] : null;
        $this->container['afterlogin_selector'] = isset($data['afterlogin_selector']) ? $data['afterlogin_selector'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets click_element
     *
     * @return bool
     */
    public function getClickElement()
    {
        return $this->container['click_element'];
    }

    /**
     * Sets click_element
     *
     * @param bool $click_element click_element
     *
     * @return $this
     */
    public function setClickElement($click_element)
    {
        $this->container['click_element'] = $click_element;

        return $this;
    }

    /**
     * Gets click_element_selector
     *
     * @return string
     */
    public function getClickElementSelector()
    {
        return $this->container['click_element_selector'];
    }

    /**
     * Sets click_element_selector
     *
     * @param string $click_element_selector click_element_selector
     *
     * @return $this
     */
    public function setClickElementSelector($click_element_selector)
    {
        $this->container['click_element_selector'] = $click_element_selector;

        return $this;
    }

    /**
     * Gets login_url
     *
     * @return string
     */
    public function getLoginUrl()
    {
        return $this->container['login_url'];
    }

    /**
     * Sets login_url
     *
     * @param string $login_url login_url
     *
     * @return $this
     */
    public function setLoginUrl($login_url)
    {
        $this->container['login_url'] = $login_url;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets username_selector
     *
     * @return string
     */
    public function getUsernameSelector()
    {
        return $this->container['username_selector'];
    }

    /**
     * Sets username_selector
     *
     * @param string $username_selector username_selector
     *
     * @return $this
     */
    public function setUsernameSelector($username_selector)
    {
        $this->container['username_selector'] = $username_selector;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets password_selector
     *
     * @return string
     */
    public function getPasswordSelector()
    {
        return $this->container['password_selector'];
    }

    /**
     * Sets password_selector
     *
     * @param string $password_selector password_selector
     *
     * @return $this
     */
    public function setPasswordSelector($password_selector)
    {
        $this->container['password_selector'] = $password_selector;

        return $this;
    }

    /**
     * Gets submit_selector
     *
     * @return string
     */
    public function getSubmitSelector()
    {
        return $this->container['submit_selector'];
    }

    /**
     * Sets submit_selector
     *
     * @param string $submit_selector submit_selector
     *
     * @return $this
     */
    public function setSubmitSelector($submit_selector)
    {
        $this->container['submit_selector'] = $submit_selector;

        return $this;
    }

    /**
     * Gets afterlogin_selector
     *
     * @return string
     */
    public function getAfterloginSelector()
    {
        return $this->container['afterlogin_selector'];
    }

    /**
     * Sets afterlogin_selector
     *
     * @param string $afterlogin_selector afterlogin_selector
     *
     * @return $this
     */
    public function setAfterloginSelector($afterlogin_selector)
    {
        $this->container['afterlogin_selector'] = $afterlogin_selector;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
