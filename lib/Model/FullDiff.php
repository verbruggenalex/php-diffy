<?php
/**
 * FullDiff
 *
 * PHP version 5
 *
 * @category Class
 * @package  VerbruggenAlex\PhpDiffy
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Diffy
 *
 * API for visual regression testing tool Diffy
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VerbruggenAlex\PhpDiffy\Model;

use \ArrayAccess;
use \VerbruggenAlex\PhpDiffy\ObjectSerializer;

/**
 * FullDiff Class Doc Comment
 *
 * @category Class
 * @package  VerbruggenAlex\PhpDiffy
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FullDiff implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FullDiff';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date' => 'string',
'name' => 'string',
'project' => '\VerbruggenAlex\PhpDiffy\Model\FullDiffProject',
'snapshot1' => '\VerbruggenAlex\PhpDiffy\Model\FullDiffSnapshot1',
'snapshot2' => '\VerbruggenAlex\PhpDiffy\Model\FullDiffSnapshot1',
'diffs' => '\VerbruggenAlex\PhpDiffy\Model\FullDiffDiffs',
'env1' => 'string',
'env2' => 'string',
'env1_url' => 'string',
'env2_url' => 'string',
'state' => 'int',
'archive_url' => 'string',
'result' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date' => 'j M - h:i',
'name' => null,
'project' => null,
'snapshot1' => null,
'snapshot2' => null,
'diffs' => null,
'env1' => null,
'env2' => null,
'env1_url' => 'url',
'env2_url' => 'url',
'state' => null,
'archive_url' => 'url',
'result' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
'name' => 'name',
'project' => 'project',
'snapshot1' => 'snapshot1',
'snapshot2' => 'snapshot2',
'diffs' => 'diffs',
'env1' => 'env1',
'env2' => 'env2',
'env1_url' => 'env1Url',
'env2_url' => 'env2Url',
'state' => 'state',
'archive_url' => 'archiveUrl',
'result' => 'result'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
'name' => 'setName',
'project' => 'setProject',
'snapshot1' => 'setSnapshot1',
'snapshot2' => 'setSnapshot2',
'diffs' => 'setDiffs',
'env1' => 'setEnv1',
'env2' => 'setEnv2',
'env1_url' => 'setEnv1Url',
'env2_url' => 'setEnv2Url',
'state' => 'setState',
'archive_url' => 'setArchiveUrl',
'result' => 'setResult'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
'name' => 'getName',
'project' => 'getProject',
'snapshot1' => 'getSnapshot1',
'snapshot2' => 'getSnapshot2',
'diffs' => 'getDiffs',
'env1' => 'getEnv1',
'env2' => 'getEnv2',
'env1_url' => 'getEnv1Url',
'env2_url' => 'getEnv2Url',
'state' => 'getState',
'archive_url' => 'getArchiveUrl',
'result' => 'getResult'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ENV1_PRODUCTION = 'production';
const ENV1_STAGING = 'staging';
const ENV1_DEVELOPMENT = 'development';
const ENV1_CUSTOM = 'custom';
const ENV2_PRODUCTION = 'production';
const ENV2_STAGING = 'staging';
const ENV2_DEVELOPMENT = 'development';
const ENV2_CUSTOM = 'custom';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnv1AllowableValues()
    {
        return [
            self::ENV1_PRODUCTION,
self::ENV1_STAGING,
self::ENV1_DEVELOPMENT,
self::ENV1_CUSTOM,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnv2AllowableValues()
    {
        return [
            self::ENV2_PRODUCTION,
self::ENV2_STAGING,
self::ENV2_DEVELOPMENT,
self::ENV2_CUSTOM,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['snapshot1'] = isset($data['snapshot1']) ? $data['snapshot1'] : null;
        $this->container['snapshot2'] = isset($data['snapshot2']) ? $data['snapshot2'] : null;
        $this->container['diffs'] = isset($data['diffs']) ? $data['diffs'] : null;
        $this->container['env1'] = isset($data['env1']) ? $data['env1'] : null;
        $this->container['env2'] = isset($data['env2']) ? $data['env2'] : null;
        $this->container['env1_url'] = isset($data['env1_url']) ? $data['env1_url'] : null;
        $this->container['env2_url'] = isset($data['env2_url']) ? $data['env2_url'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['archive_url'] = isset($data['archive_url']) ? $data['archive_url'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEnv1AllowableValues();
        if (!is_null($this->container['env1']) && !in_array($this->container['env1'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'env1', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEnv2AllowableValues();
        if (!is_null($this->container['env2']) && !in_array($this->container['env2'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'env2', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \VerbruggenAlex\PhpDiffy\Model\FullDiffProject
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \VerbruggenAlex\PhpDiffy\Model\FullDiffProject $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets snapshot1
     *
     * @return \VerbruggenAlex\PhpDiffy\Model\FullDiffSnapshot1
     */
    public function getSnapshot1()
    {
        return $this->container['snapshot1'];
    }

    /**
     * Sets snapshot1
     *
     * @param \VerbruggenAlex\PhpDiffy\Model\FullDiffSnapshot1 $snapshot1 snapshot1
     *
     * @return $this
     */
    public function setSnapshot1($snapshot1)
    {
        $this->container['snapshot1'] = $snapshot1;

        return $this;
    }

    /**
     * Gets snapshot2
     *
     * @return \VerbruggenAlex\PhpDiffy\Model\FullDiffSnapshot1
     */
    public function getSnapshot2()
    {
        return $this->container['snapshot2'];
    }

    /**
     * Sets snapshot2
     *
     * @param \VerbruggenAlex\PhpDiffy\Model\FullDiffSnapshot1 $snapshot2 snapshot2
     *
     * @return $this
     */
    public function setSnapshot2($snapshot2)
    {
        $this->container['snapshot2'] = $snapshot2;

        return $this;
    }

    /**
     * Gets diffs
     *
     * @return \VerbruggenAlex\PhpDiffy\Model\FullDiffDiffs
     */
    public function getDiffs()
    {
        return $this->container['diffs'];
    }

    /**
     * Sets diffs
     *
     * @param \VerbruggenAlex\PhpDiffy\Model\FullDiffDiffs $diffs diffs
     *
     * @return $this
     */
    public function setDiffs($diffs)
    {
        $this->container['diffs'] = $diffs;

        return $this;
    }

    /**
     * Gets env1
     *
     * @return string
     */
    public function getEnv1()
    {
        return $this->container['env1'];
    }

    /**
     * Sets env1
     *
     * @param string $env1 env1
     *
     * @return $this
     */
    public function setEnv1($env1)
    {
        $allowedValues = $this->getEnv1AllowableValues();
        if (!is_null($env1) && !in_array($env1, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'env1', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['env1'] = $env1;

        return $this;
    }

    /**
     * Gets env2
     *
     * @return string
     */
    public function getEnv2()
    {
        return $this->container['env2'];
    }

    /**
     * Sets env2
     *
     * @param string $env2 env2
     *
     * @return $this
     */
    public function setEnv2($env2)
    {
        $allowedValues = $this->getEnv2AllowableValues();
        if (!is_null($env2) && !in_array($env2, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'env2', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['env2'] = $env2;

        return $this;
    }

    /**
     * Gets env1_url
     *
     * @return string
     */
    public function getEnv1Url()
    {
        return $this->container['env1_url'];
    }

    /**
     * Sets env1_url
     *
     * @param string $env1_url Base site URL for first environment
     *
     * @return $this
     */
    public function setEnv1Url($env1_url)
    {
        $this->container['env1_url'] = $env1_url;

        return $this;
    }

    /**
     * Gets env2_url
     *
     * @return string
     */
    public function getEnv2Url()
    {
        return $this->container['env2_url'];
    }

    /**
     * Sets env2_url
     *
     * @param string $env2_url Base site URL for second environment
     *
     * @return $this
     */
    public function setEnv2Url($env2_url)
    {
        $this->container['env2_url'] = $env2_url;

        return $this;
    }

    /**
     * Gets state
     *
     * @return int
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int $state Diff status
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets archive_url
     *
     * @return string
     */
    public function getArchiveUrl()
    {
        return $this->container['archive_url'];
    }

    /**
     * Sets archive_url
     *
     * @param string $archive_url Archive url
     *
     * @return $this
     */
    public function setArchiveUrl($archive_url)
    {
        $this->container['archive_url'] = $archive_url;

        return $this;
    }

    /**
     * Gets result
     *
     * @return int
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param int $result Change percentage.
     *
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
